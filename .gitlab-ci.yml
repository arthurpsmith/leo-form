# .gitlab-ci.yml file to be placed in the root of your repository

variables:
  MAINT_BRANCH_PATTERN: /^(([0-9]+)\.)?([0-9]+)\.x/
  PREREL_BRANCH_PATTERN: /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
  CYPRESS_INSTALL_BINARY: "0"
  LIB_NAME: "crossref-ui"
  DEPLOY_EXCLUDE_GLOB: "demo.html"
  DEPLOY_INCLUDE_GLOB: "*"
  DEPLOY_PATH_PREFIX: "${CI_PROJECT_NAME}/${LIB_NAME}"
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''

stages:
  - get-version
  - unit-test
  - build
  - integration-test
  - deploy-stg
  - deploy-sandbox
  - deploy-production
  - semantic-release
  - deploy-pages

unit test:
  image: node:lts-alpine
  stage: unit-test
  script:
    - export APP_VERSION="$(cat VERSION.txt)"
    - echo "APP_VERSION is ${APP_VERSION}"
    - npm ci
    - npm run test:unit

semantic-release:
  image: registry.gitlab.com/crossref/infrastructure/aws-ecr-ecs-cicd-docker:latest
  stage: semantic-release
  variables:
    AWS_DEFAULT_PROFILE: staging
  tags:
    - aws
    - crossref-portal
#  services:
#    - docker:dind
  before_script:
    - export APP_VERSION="$(cat VERSION.txt)"
    - "[[ -z ${CI_PIPELINE_ID+x} ]] && export APP_VERSION=$CI_COMMIT_SHA"
    - echo "APP_VERSION is ${APP_VERSION}"
    - if [ -z "$APP_VERSION" ]; then echo "APP_VERSION is not defined, exiting."; exit 0; fi
  script:
    - "[[ ! -z ${CI_PIPELINE_ID+x} ]] && npx semantic-release"
  artifacts:
    paths:
      - dist # artifact path must be /public for GitLab Pages to pick it up
  only:
    - develop
    - master

build:
  image: registry.gitlab.com/crossref/infrastructure/aws-ecr-ecs-cicd-docker:latest
  stage: build
  variables:
    AWS_DEFAULT_PROFILE: staging
  tags:
    - aws
    - crossref-portal
#  services:
#    - docker:dind
  before_script:
    - export APP_VERSION="$(cat VERSION.txt)"
    - "[[ -z ${CI_PIPELINE_ID+x} ]] && export APP_VERSION=$CI_COMMIT_SHA"
    - echo "APP_VERSION is ${APP_VERSION}"
    - if [ -z "$APP_VERSION" ]; then echo "APP_VERSION is not defined, exiting."; exit 0; fi
    - export SENTRY_URL_PREFIX="~${DEPLOY_PATH}"
    - export SENTRY_RELEASE="${LIB_NAME}@${APP_VERSION}"
  script:
    - export SENTRY_LOG_LEVEL=debug
    - npm ci
    - npm run build:lib:standalone
    - export VUE_PREFIX_CSS=true && npm run build:lib:standalone:prefixed-css
    - mv "./dist-prefixed-css/${LIB_NAME}.prefixed.css" dist/
  artifacts:
    paths:
      - dist # artifact path must be /public for GitLab Pages to pick it up
  only:
    - develop
    - master
    - /^yaffol/e2e-.*/
    - cdelojo/fix-auth-redirect

integration-test:
  image: docker/compose
  stage: integration-test
  services:
    - docker:dind

  before_script:
    - docker info

  script:
    - docker-compose -f docker-compose-integration-test.yml up --exit-code-from frontend-e2e-test

  only:
    - master
    - develop
    - /^yaffol/e2e-.*/
    - cdelojo/fix-auth-redirect

pages: # the job must be named pages
  image: node:lts-alpine
  stage: deploy-pages
  before_script:
    - export APP_VERSION="$(cat VERSION.txt)"
    - echo "APP_VERSION is ${APP_VERSION}"
  script:
    - npm ci
    - npm run build
    - mv public public-vue # GitLab Pages hooks on the public folder
    - mv dist public # rename the dist folder (result of npm run build)
    - echo "APP_VERSION is ${APP_VERSION}" > public/version.txt
    # optionally, you can activate gzip support wih the following line:
    - find public -type f -regex '.*\.\(htm\|html\|txt\|text\|js\|css\)$' -exec gzip -f -k {} \;
  artifacts:
    paths:
      - public # artifact path must be /public for GitLab Pages to pick it up
  only:
    - yaffol/issue#1084-run-integration-tests-in-ci

# Build and deploy to staging CDN
deploy-stg:
  image: registry.gitlab.com/crossref/infrastructure/aws-ecr-ecs-cicd-docker:latest
  stage: deploy-stg
  variables:
    AWS_DEFAULT_PROFILE: staging
  tags:
    - aws
    - crossref-portal
  services:
    - docker:dind
  before_script:
    - export APP_VERSION="$(cat VERSION.txt)"
    - export APP_VERSION_NAME="crossref-${APP_VERSION}"
    - export DEPLOY_PATH="${CI_PROJECT_NAME}/${LIB_NAME}/${APP_VERSION}/"
    - echo "APP_VERSION is ${APP_VERSION}"
    - echo "APP_VERSION_NAME is ${APP_VERSION_NAME}"
    - if [ -z "$APP_VERSION" ]; then echo "APP_VERSION is not defined, exiting."; exit 0; fi
  script:
    - aws s3 cp dist s3://$STAGING_S3_BUCKET/$DEPLOY_PATH --recursive --exclude "${DEPLOY_EXCLUDE_GLOB}" --include "${DEPLOY_INCLUDE_GLOB}"
    - aws cloudfront create-invalidation --distribution-id $STAGING_CLOUDFRONT_DIST_ID --paths '/$CI_PROJECT_NAME/$LIB_NAME/*'
  artifacts:
    paths:
      - dist # artifact path must be /public for GitLab Pages to pick it up
  only:
    - develop
    - master
    - alpha

# Deploy to sandbox CDN
deploy-sandbox:
  image: registry.gitlab.com/crossref/infrastructure/aws-ecr-ecs-cicd-docker:latest
  stage: deploy-production
  variables:
    AWS_DEFAULT_PROFILE: sandbox
  tags:
    - aws
    - crossref-portal
  before_script:
    - export APP_VERSION="$(cat VERSION.txt)"
    - export DEPLOY_PATH="${CI_PROJECT_NAME}/${LIB_NAME}/${APP_VERSION}/"
    - echo "APP_VERSION is ${APP_VERSION}"
    - if [ -z "$APP_VERSION" ]; then echo "APP_VERSION is not defined, exiting."; exit 0; fi
  script:
    - aws s3 cp dist s3://$SANDBOX_S3_BUCKET/$DEPLOY_PATH --recursive --exclude "${DEPLOY_EXCLUDE_GLOB}" --include "${DEPLOY_INCLUDE_GLOB}"
#    - aws cloudfront create-invalidation --distribution-id $PROD_CLOUDFRONT_DIST_ID --paths '/$CI_PROJECT_NAME/$LIB_NAME/*'
  artifacts:
    paths:
      - dist # artifact path must be /public for GitLab Pages to pick it up
  only:
    - master

# Deploy to production CDN
deploy-production:
  image: registry.gitlab.com/crossref/infrastructure/aws-ecr-ecs-cicd-docker:latest
  stage: deploy-production
  variables:
    AWS_DEFAULT_PROFILE: production
  tags:
    - aws
    - crossref-portal
  before_script:
    - export APP_VERSION="$(cat VERSION.txt)"
    - export DEPLOY_PATH="${CI_PROJECT_NAME}/${LIB_NAME}/${APP_VERSION}/"
    - echo "APP_VERSION is ${APP_VERSION}"
    - if [ -z "$APP_VERSION" ]; then echo "APP_VERSION is not defined, exiting."; exit 0; fi
  script:
    - aws s3 cp dist s3://$PRODUCTION_S3_BUCKET/$DEPLOY_PATH --recursive --exclude "${DEPLOY_EXCLUDE_GLOB}" --include "${DEPLOY_INCLUDE_GLOB}"
    - aws cloudfront create-invalidation --distribution-id $PROD_CLOUDFRONT_DIST_ID --paths '/$CI_PROJECT_NAME/$LIB_NAME/*'
  artifacts:
    paths:
      - dist # artifact path must be /public for GitLab Pages to pick it up
  only:
    - master

# Get current semantic version for release branches
get-semantic-version:
  image: registry.gitlab.com/crossref/infrastructure/aws-ecr-ecs-cicd-docker:latest
  stage: get-version
  only:
    refs:
      - master
      - alpha
      - develop
      - $MAINT_BRANCH_PATTERN
      - $PREREL_BRANCH_PATTERN
  script:
    - echo "Using semantic version"
#    - npm install @semantic-release/gitlab @semantic-release/exec @semantic-release/changelog
    - npx semantic-release --dry-run
  artifacts:
    paths:
      - VERSION.txt


# Get generic version for non-release branches
get-generic-version:
  image: node:lts-alpine
  stage: get-version
  except:
    refs:
      - master
      - alpha
      - develop
      - $MAINT_BRANCH_PATTERN
      - $PREREL_BRANCH_PATTERN
  script:
    - echo "Using generic version"
    - export APP_VERSION="build-${CI_PIPELINE_ID}"
    - echo "Version is ${APP_VERSION}"
    - echo $APP_VERSION > VERSION.txt
  artifacts:
    paths:
      - VERSION.txt
